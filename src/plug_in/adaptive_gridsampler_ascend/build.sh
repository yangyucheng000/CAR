#!/bin/bash
# Copyright 2022 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================

export ASCEND_TENSOR_COMPILER_INCLUDE=/usr/local/Ascend/ascend-toolkit/latest/compiler/include

export TOOLCHAIN_DIR=/usr/local/Ascend/ascend-toolkit/latest/toolkit/toolchain/hcc

export AICPU_KERNEL_TARGET=cust_aicpu_kernels

export COMPILE_KERNEL_TARGET=cpu_tbe

export AICPU_SOC_VERSION=Ascend910

clean=n
compile_component=$COMPILE_KERNEL_TARGET
while true
do
  case "$1" in
  -h | --help)
  echo "  --help                show the help info of using this shell"
  echo "  --kernel_so_name=*    so name of aicpu custom operators "
  echo "  --toolchain_dir=*     specify cross compile toolchain directory"
  echo "  clean                 clean compile result directory"
  echo "  -c                    only compile cpu"
  echo "  -t                    only compile tbe"
  exit 0
  ;;
  --so_name=*)
  so_name=`echo ${1} | cut -d"=" -f2`
  length=${#so_name}
  aicpu_target_name=${so_name:3:($length - 6)}
  export AICPU_KERNEL_TARGET=$aicpu_target_name
  echo "aicpu_target_name=${aicpu_target_name}"
  shift
  ;;
  clean)
  clean=y
  shift
  ;;
  -c | -cpu)
  compile_component=cpu
  shift
  ;;
  -t | -tbe)
  compile_component=tbe
  shift
  ;;
  --toolchain_dir=*)
  tool_dir=`echo ${1} | cut -d"=" -f2`
  export TOOLCHAIN_DIR=$tool_dir
  echo "specified TOOLCHAIN_DIR=$TOOLCHAIN_DIR"
  shift
  ;;
  -*)
  echo "  --help                show the help info of using this shell"
  echo "  --toolchain_dir=*     specify cross compile toolchain directory"
  echo "  --so_name=*           so name of aicpu custom operators generated by compilation"
  echo "  clean                 clean compile result directory"
  echo "  -c                    only compile cpu"
  echo "  -t                    only compile tbe"
  exit 0
  ;;
  *)
  break
  ;;
  esac
done

# The following logic can be used without modification ######
log() {
  cur_date=`date +"%Y-%m-%d %H:%M:%S"`
  echo "[$cur_date] "$1
}

project_path=$(cd "$(dirname "$0")"; pwd)
# clean compile result
if [ "x$clean" == "xy" ] 2>/dev/null; then
  rm -rf $project_path/caffe.proto 2>/dev/null
  rm -rf $project_path/caffe.proto.origin 2>/dev/null
  rm -rf $project_path/build_out 2>/dev/null
  rm -rf $project_path/framework/caffe_plugin/proto/caffe 2>/dev/null
  log "[INFO] Clean successfully."
  exit 0
fi

# specify compile target
if [ "x$compile_component" == "xcpu" ] 2>/dev/null; then
  compile_option="cpu"
  export COMPILE_KERNEL_TARGET=$compile_option
  log "[INFO] compile target is cpu."
else
  if [ "x$compile_component" == "xtbe" ] 2>/dev/null; then
    compile_option="tbe"
    export COMPILE_KERNEL_TARGET=$compile_option
    log "[INFO] compile target is tbe."
  fi
fi

if [ ! "x$AICPU_SOC_VERSION" = "xLMIX" ];then
  # if specified cross compile toolchain directory is not exist, log error and exit
  if [[ ! -z "$TOOLCHAIN_DIR" ]] && [[ ! -d "$TOOLCHAIN_DIR" ]];then
      log "[ERROR] Specified cross compile toolchain directory is not exist"
      exit 1
  fi
fi

# set aicpu kernel implement compiler target, default to be custom_cpu_kernels
if [[ -z "${aicpu_target_name}" ]] && [[ -z "${AICPU_KERNEL_TARGET}" ]]; then
    log "[INFO] no so_name is specified, use default compile target: libcust_aicpu_kernels.so!"
    aicpu_target_name="cust_aicpu_kernels"
    export AICPU_KERNEL_TARGET=$aicpu_target_name
    #exit 1
fi

chmod -R 755 $project_path/cmake/util/
mkdir -p $project_path/build_out

###### Environment variable settings, need to set according to your own device ######

if [[ -z "${ASCEND_TENSOR_COMPILER_INCLUDE}" ]]; then
    if [[ -d "/usr/local/Ascend/ascend-toolkit/latest/compiler/include" ]];then
        export ASCEND_TENSOR_COMPILER_INCLUDE=/usr/local/Ascend/ascend-toolkit/latest/compiler/include
    else
        log "[ERROR] ENV ASCEND_TENSOR_COMPILER_INCLUDE is not set"
        exit 1
    fi
else
    if [[ ! -d "${ASCEND_TENSOR_COMPILER_INCLUDE}" ]];then
        log "[ERROR] ENV ASCEND_TENSOR_COMPILER_INCLUDE=${ASCEND_TENSOR_COMPILER_INCLUDE} dir is not exist"
        exit 1
    fi
fi

# STEP 1, Check plugin files and proto files
# Check for caffe_plugin files, If there is no plugin file, do not compile caffe proto.
caffe_plugin_cpp_files_num=$(ls $project_path/framework/caffe_plugin/*.cc 2> /dev/null | wc -l)
if [[ "$caffe_plugin_cpp_files_num" == 0 ]];then
  log "[INFO] No caffe plugin files."
fi  # endif compile caffe proto

# STEP 2, CMake and make
cd $project_path/build_out
rm -rf *.run
log "[INFO] Cmake begin."

if [ "x$AICPU_SOC_VERSION" = "xLMIX" ];then
     CMAKE_ARGS="-DLMIX=TRUE"
     cmake $CMAKE_ARGS ..
else
  if [ "x$AICPU_SOC_VERSION" = "xAscend310RC" ];then
    CMAKE_ARGS="-DMINRC=TRUE"
    cmake $CMAKE_ARGS ..
  else
    cmake ..
  fi
fi
if [ $? -ne 0 ]; then
  log "[ERROR] Please check cmake result."
  exit 1
fi

log "[INFO] Make begin."
make -j
if [ $? -ne 0 ]; then
  log "[ERROR] Please check make result."
  exit 1
fi
log "[INFO] Build successfully, the target is in $project_path/build_out."
